{"field_extraction_builder": {"puppet:facts": {"data_format": "json", "is_parsed": true}, "puppet:bolt": {"data_format": "json", "is_parsed": true}, "puppet:summary": {"data_format": "json", "is_parsed": true}, "puppet:detailed": {"data_format": "json", "is_parsed": true}}, "alert_action_builder": {"modular_alerts": [{"largeIcon": "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", "uuid": "f45cb72c1e9e459c996c77c335e41c73", "description": "Runs a Bolt Investigate Task with Puppet Enterprise", "short_name": "puppet_run_task_investigate", "label": "Run a Bolt Investigative Task", "code": "\n# encoding = utf-8\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets the setup parameters and prints them to the log\n    puppet_enterprise_console = helper.get_global_setting(\"puppet_enterprise_console\")\n    helper.log_info(\"puppet_enterprise_console={}\".format(puppet_enterprise_console))\n    puppet_read_user = helper.get_global_setting(\"puppet_read_user\")\n    helper.log_info(\"puppet_read_user={}\".format(puppet_read_user))\n    puppet_read_user_pass = helper.get_global_setting(\"puppet_read_user_pass\")\n    helper.log_info(\"puppet_read_user_pass={}\".format(puppet_read_user_pass))\n    splunk_hec_url = helper.get_global_setting(\"splunk_hec_url\")\n    helper.log_info(\"splunk_hec_url={}\".format(splunk_hec_url))\n    splunk_hec_token = helper.get_global_setting(\"splunk_hec_token\")\n    helper.log_info(\"splunk_hec_token={}\".format(splunk_hec_token))\n    bolt_user = helper.get_global_setting(\"bolt_user\")\n    helper.log_info(\"bolt_user={}\".format(bolt_user))\n    bolt_user_pass = helper.get_global_setting(\"bolt_user_pass\")\n    helper.log_info(\"bolt_user_pass={}\".format(bolt_user_pass))\n    puppet_bolt_server = helper.get_global_setting(\"puppet_bolt_server\")\n    helper.log_info(\"puppet_bolt_server={}\".format(puppet_bolt_server))\n    puppet_action_hec_token = helper.get_global_setting(\"puppet_action_hec_token\")\n    helper.log_info(\"puppet_action_hec_token={}\".format(puppet_action_hec_token))\n    puppet_db_url = helper.get_global_setting(\"puppet_db_url\")\n    helper.log_info(\"puppet_db_url={}\".format(puppet_db_url))\n    pe_has_access_proxy = helper.get_global_setting(\"pe_has_access_proxy\")\n    helper.log_info(\"pe_has_access_proxy={}\".format(pe_has_access_proxy))\n\n    # The following example gets the alert action parameters and prints them to the log\n    bolt_investigate_target = helper.get_param(\"bolt_investigate_target\")\n    helper.log_info(\"bolt_investigate_target={}\".format(bolt_investigate_target))\n\n    bolt_investigate_name = helper.get_param(\"bolt_investigate_name\")\n    helper.log_info(\"bolt_investigate_name={}\".format(bolt_investigate_name))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n\n    helper.log_info(\"Alert action puppet_run_task_investigate started.\")\n\n    # TODO: Implement your alert action logic here\n    return 0\n", "parameters": [{"help_string": "", "value": "$result.host$", "format_type": "text", "type": "", "name": "bolt_investigate_target", "label": "Host", "default_value": "$result.host$", "required": true}, {"possible_values": {"Last Login": "lastlogin", "Running Services": "services", "Open Ports": "ports"}, "value": "lastlogin", "format_type": "dropdownlist", "type": "", "name": "bolt_investigate_name", "label": "Investigate", "default_value": "lastlogin", "required": true, "help_string": "Pick which investigative task to run"}], "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAABL5JREFUWAnNWEtIY1cY/s69N8m9eagtFK1TW7uwUhdKO3QUQepiWmQWQunKWXXVlSDIFGFWlVK6Geimu4JSC+1sBlIXfQ1FFx2wuCzUobSC1Iq1TBLzzk1uTv//5GEeN46mCfjHe8/7P9/5/sdJFGNjY9JxHFwF0XUdBoPJ5/NXAY/CoF0ZJGUgVw6Q4c6QpG4N/K4XCVHf0fGWKyBd0/HyczZQAKRCQECEwGla4CQpqN49Yl0BXQsZ+OFeATJFm4MdngDoAhsPBT74wkDQ4qjsDleuRy1IoiYFPHkChHf68OufJoEjCDYZUSt2DQzb3xUQGYr+ivgtauKdj2JY+zELYRWpV4NodizW0zFxNVllzxd7svj4tg83XiEHt1NIF3g6+Ra8HQPQqMiVIcE0eCWGe3O4ezuBm6+lCJDE29d19PkMFKv+w9Abn8YtLtcWo6OjsjFTWz4N79/sQzFXcuhssYi3Jmy8/tIpDrIB3LpTwAm5mSEp+sp4TMsDXcsrs14Owtlsj8cDV0CgjeycgKMTF7ShpJCXtoPwqh83BhP4KxPCT48kfB6KRBoTpo7PvslSSvBRm5C2Ka0BkUJJHw76kpTyUCZewOaqD9cHEhQOlTGyeo+BW3cN/P4Pg2fK2hMG5OpDrO4MTKkl2TyWF9/+nCP/0gGHADm0XJXEIDPZHo66VS0B1c2iBvMhKG0b5NTdlAtr59PnnTz0Kg3ls1Sp4YGKGduH3JIhVs9+VPIlIGcLTI8ILL7LpqInQGbz03IuAwbdLPVgEokE4vE4stmsKr1er7oPY7HYuWhdGZKUpTOZkhexa+eLBbz5qo4vVwQsZHDv+wC+epiDh9IDi6DIiqSpXsbEaWRnZwfspNvb2xgZGcHU1BRs21bt5eVlpFIpaFozH01hz8wMBnV8vWrBSRfUHrKg4flnkvDpBXz6XQif3M8j1Espocj8laWGId54b28PwWCwMlpXHh8fY3p6WjFWO+AaZeqQdIEOBWJ4wUpi0H+Ka6EovE4ODx6Z+PB+Cj0EhpFwDiKtpadWc009EolgYWEBExMT2NjYUCMDAwNYXFwkK2RqZpaqzZxVptCGv5zo6H/Ph9UHJoRfR5zMYnoNFeKVaU8r19fXsbW1pUy0tLSEg4MDtWR+fl6ZsHH9OYAoxDUJ00rDq/GFqtPVYJMJq0Zq1OXaNgxD+YrKY8Tm7u6umtff3w/LsprWuDq1kHS7U8Z941mJvz+n68AhEFm+1+iuaZ1Lm5RzBzs4f9usyNDQkKomk0nFEEdfrbgyRDcU/ohZeBz3YO9fA48jVFL7OOOj5HymvFZRq/rs7KxiKBqNYm5uDpOTk2oqM+X2e7Apyng2Xe5IpMk8NSdjQ5m6Bq+lP/VLWmOUsWMfHh5ifHxcgeHXzMwMjo6Oqm2ucJS5mozTQ2+wnsrqysu5kAr/4eHhKhhOmCsrK9jf34dpmlW1lYoroMpgJ8pwOAyONDYXg+FEyQy6geH9ug7I7/eDHXhzc1O5AGfnVmC6Coj/ccDSWKrOc15dYYhBrK2tKSY4mjgXXVRco+yii8+bl06nKaNLFTmNuabVupZR1mrBZfrZd9oR18TYjqJOrblygIxKFHTqhP9HD2P5D7xNuyngDwkoAAAAAElFTkSuQmCC"}, {"largeIcon": "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", "uuid": "1f0457025dbb43979505cabeb469594a", "description": "Generates a detailed report from a puppet:summary event", "short_name": "generate_detailed_report", "label": "Generate detailed report", "code": "# encoding = utf-8\nimport json\nimport requests\nimport collections\nfrom datetime import datetime\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\n\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\ndef get_resource_events(uuid, server, token):\n  \n  # setup the headers\n  headers = {'X-Authentication': token}\n  #setup the url\n  url = 'https://{}:8081/pdb/query/v4'.format(server)\n\n  report_elements = [\n    'hash', \n    'status', \n    'puppet_version', \n    'report_format', \n    'catalog_uuid', \n    'job_id', \n    'cached_catalog_status', \n    'configuration_version', \n    'environment', \n    'corrective_change', \n    'noop', \n    'noop_pending', \n    'certname', \n    'transaction_uuid', \n    'code_id', \n    'resource_events', \n    'producer_timestamp', \n    'producer', \n    'start_time', \n    'end_time', \n    'receive_time', \n    'logs', \n    'metrics'\n  ]\n\n  joined_elements = ', '.join(report_elements)\n\n  query_string = {}\n  query_string['query'] = 'reports[{}] {{ transaction_uuid = \"{}\" }}'.format(joined_elements, uuid)\n  \n  resource_events = json.loads(requests.post(url, json=query_string, headers=headers, verify=False).text)\n\n  return resource_events\n\ndef submit_to_splunk(detailed_report, splunk, hec):\n  # setup the headers\n  headers = {\"Authorization\" : 'Splunk {} '.format(hec) }\n  #setup the url\n  url = 'https://{}:8088/services/collector'.format(splunk)\n  \n  # cleanup start_time\n  # start_time = 2019-04-03T12:41:27.481Z\n  utc_time = datetime.strptime(detailed_report['start_time'], \"%Y-%m-%dT%H:%M:%S.%fZ\")\n  epoch = (utc_time - datetime(1970, 1, 1)).total_seconds()\n\n  report = {\n    'host': detailed_report['certname'],\n    'time': epoch,\n    'sourcetype': 'puppet:detailed',\n    'event': detailed_report\n  }\n\n  requests.post(url, json=report, headers=headers, verify=False)\n\ndef is_json(myjson):\n    try:\n        json_object = json.loads(myjson)\n    except ValueError as e:\n        return False\n    return True\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets the setup parameters and prints them to the log\n    puppet_enterprise_console = helper.get_global_setting(\"puppet_enterprise_console\")\n    helper.log_info(\"puppet_enterprise_console={}\".format(puppet_enterprise_console))\n    puppet_read_user = helper.get_global_setting(\"puppet_read_user\")\n    helper.log_info(\"puppet_read_user={}\".format(puppet_read_user))\n    puppet_read_user_pass = helper.get_global_setting(\"puppet_read_user_pass\")\n    helper.log_info(\"puppet_read_user_pass={}\".format(puppet_read_user_pass))\n    splunk_hec_url = helper.get_global_setting(\"splunk_hec_url\")\n    helper.log_info(\"splunk_hec_url={}\".format(splunk_hec_url))\n    splunk_hec_token = helper.get_global_setting(\"splunk_hec_token\")\n    helper.log_info(\"splunk_hec_token={}\".format(splunk_hec_token))\n    bolt_user = helper.get_global_setting(\"bolt_user\")\n    helper.log_info(\"bolt_user={}\".format(bolt_user))\n    bolt_user_pass = helper.get_global_setting(\"bolt_user_pass\")\n    helper.log_info(\"bolt_user_pass={}\".format(bolt_user_pass))\n    puppet_bolt_server = helper.get_global_setting(\"puppet_bolt_server\")\n    helper.log_info(\"puppet_bolt_server={}\".format(puppet_bolt_server))\n    puppet_action_hec_token = helper.get_global_setting(\"puppet_action_hec_token\")\n    helper.log_info(\"puppet_action_hec_token={}\".format(puppet_action_hec_token))\n    puppet_db_url = helper.get_global_setting(\"puppet_db_url\")\n    helper.log_info(\"puppet_db_url={}\".format(puppet_db_url))\n\n    # The following example gets the alert action parameters and prints them to the log\n    transaction_uuid = helper.get_param(\"transaction_uuid\")\n    helper.log_info(\"transaction_uuid={}\".format(transaction_uuid))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n\n    #helper.log_info(\"Alert action generate_detailed_report started.\")\n    \n    events = helper.get_events()\n    for event in events:\n        event_dict = event\n\n    #helper.log_info(event_dict)\n\n    # attempt to parse the event store to see if it's json\n    if is_json(event_dict[\"_raw\"]):\n        event_content = json.loads(event_dict[\"_raw\"])\n        event_uuid = event_content['transaction_uuid']\n        event_pe_console = event_content['pe_console']\n    else:\n        event_uuid = None\n        event_pe_console = \"\"\n\n    uuid = helper.get_param(\"transaction_uuid\") or event_uuid\n\n    pe_console = helper.get_param(\"pe_console\") or event_pe_console\n\n    #helper.log_info('uuid={}'.format(uuid))\n\n    puppet_db_server = helper.get_global_setting(\"puppet_db_server\")\n    auth_token = helper.get_global_setting(\"auth_token\")\n    splunk_server = helper.get_global_setting(\"splunk_server\")\n    hec_token = helper.get_global_setting(\"splunk_hec_token\")\n\n    resource_response = get_resource_events(uuid, puppet_db_server, auth_token)\n\n    detailed_report = resource_response[0]\n\n    mdict = collections.defaultdict(dict)\n\n    for m in detailed_report['metrics']['data']:\n      mdict[m['category']][m['name']] = m['value']\n    \n    detailed_report['metrics'] = dict(mdict)\n\n    detailed_report['url'] = 'https://{}/#/inspect/report/{}/events'.format(pe_console, detailed_report[\"hash\"])\n\n    detailed_report[\"pe_console\"] = pe_console\n\n    submit_to_splunk(detailed_report, splunk_server, hec_token)\n\n    helper.writeevents(host=\"localhost\", source=\"localhost\")\n\n    return 0", "parameters": [{"help_string": "Used for testing, don't use in deployments.", "value": "4e5d808f-60fb-4edc-ac1f-f4d3ae4b1e68", "format_type": "text", "type": "", "name": "transaction_uuid", "label": "Transaction UUID", "default_value": "", "required": false}], "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAABL5JREFUWAnNWEtIY1cY/s69N8m9eagtFK1TW7uwUhdKO3QUQepiWmQWQunKWXXVlSDIFGFWlVK6Geimu4JSC+1sBlIXfQ1FFx2wuCzUobSC1Iq1TBLzzk1uTv//5GEeN46mCfjHe8/7P9/5/sdJFGNjY9JxHFwF0XUdBoPJ5/NXAY/CoF0ZJGUgVw6Q4c6QpG4N/K4XCVHf0fGWKyBd0/HyczZQAKRCQECEwGla4CQpqN49Yl0BXQsZ+OFeATJFm4MdngDoAhsPBT74wkDQ4qjsDleuRy1IoiYFPHkChHf68OufJoEjCDYZUSt2DQzb3xUQGYr+ivgtauKdj2JY+zELYRWpV4NodizW0zFxNVllzxd7svj4tg83XiEHt1NIF3g6+Ra8HQPQqMiVIcE0eCWGe3O4ezuBm6+lCJDE29d19PkMFKv+w9Abn8YtLtcWo6OjsjFTWz4N79/sQzFXcuhssYi3Jmy8/tIpDrIB3LpTwAm5mSEp+sp4TMsDXcsrs14Owtlsj8cDV0CgjeycgKMTF7ShpJCXtoPwqh83BhP4KxPCT48kfB6KRBoTpo7PvslSSvBRm5C2Ka0BkUJJHw76kpTyUCZewOaqD9cHEhQOlTGyeo+BW3cN/P4Pg2fK2hMG5OpDrO4MTKkl2TyWF9/+nCP/0gGHADm0XJXEIDPZHo66VS0B1c2iBvMhKG0b5NTdlAtr59PnnTz0Kg3ls1Sp4YGKGduH3JIhVs9+VPIlIGcLTI8ILL7LpqInQGbz03IuAwbdLPVgEokE4vE4stmsKr1er7oPY7HYuWhdGZKUpTOZkhexa+eLBbz5qo4vVwQsZHDv+wC+epiDh9IDi6DIiqSpXsbEaWRnZwfspNvb2xgZGcHU1BRs21bt5eVlpFIpaFozH01hz8wMBnV8vWrBSRfUHrKg4flnkvDpBXz6XQif3M8j1Espocj8laWGId54b28PwWCwMlpXHh8fY3p6WjFWO+AaZeqQdIEOBWJ4wUpi0H+Ka6EovE4ODx6Z+PB+Cj0EhpFwDiKtpadWc009EolgYWEBExMT2NjYUCMDAwNYXFwkK2RqZpaqzZxVptCGv5zo6H/Ph9UHJoRfR5zMYnoNFeKVaU8r19fXsbW1pUy0tLSEg4MDtWR+fl6ZsHH9OYAoxDUJ00rDq/GFqtPVYJMJq0Zq1OXaNgxD+YrKY8Tm7u6umtff3w/LsprWuDq1kHS7U8Z941mJvz+n68AhEFm+1+iuaZ1Lm5RzBzs4f9usyNDQkKomk0nFEEdfrbgyRDcU/ohZeBz3YO9fA48jVFL7OOOj5HymvFZRq/rs7KxiKBqNYm5uDpOTk2oqM+X2e7Apyng2Xe5IpMk8NSdjQ5m6Bq+lP/VLWmOUsWMfHh5ifHxcgeHXzMwMjo6Oqm2ucJS5mozTQ2+wnsrqysu5kAr/4eHhKhhOmCsrK9jf34dpmlW1lYoroMpgJ8pwOAyONDYXg+FEyQy6geH9ug7I7/eDHXhzc1O5AGfnVmC6Coj/ccDSWKrOc15dYYhBrK2tKSY4mjgXXVRco+yii8+bl06nKaNLFTmNuabVupZR1mrBZfrZd9oR18TYjqJOrblygIxKFHTqhP9HD2P5D7xNuyngDwkoAAAAAElFTkSuQmCC"}, {"largeIcon": "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", "uuid": "0306f882c5d3401bbc2ee5d450f63dcb", "description": "Runs a Bolt Task with Puppet Enterprise", "short_name": "puppet_run_task", "label": "Run a Bolt Task", "code": "\n# encoding = utf-8\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets the setup parameters and prints them to the log\n    puppet_enterprise_console = helper.get_global_setting(\"puppet_enterprise_console\")\n    helper.log_info(\"puppet_enterprise_console={}\".format(puppet_enterprise_console))\n    puppet_read_user = helper.get_global_setting(\"puppet_read_user\")\n    helper.log_info(\"puppet_read_user={}\".format(puppet_read_user))\n    puppet_read_user_pass = helper.get_global_setting(\"puppet_read_user_pass\")\n    helper.log_info(\"puppet_read_user_pass={}\".format(puppet_read_user_pass))\n    splunk_hec_url = helper.get_global_setting(\"splunk_hec_url\")\n    helper.log_info(\"splunk_hec_url={}\".format(splunk_hec_url))\n    splunk_hec_token = helper.get_global_setting(\"splunk_hec_token\")\n    helper.log_info(\"splunk_hec_token={}\".format(splunk_hec_token))\n    bolt_user = helper.get_global_setting(\"bolt_user\")\n    helper.log_info(\"bolt_user={}\".format(bolt_user))\n    bolt_user_pass = helper.get_global_setting(\"bolt_user_pass\")\n    helper.log_info(\"bolt_user_pass={}\".format(bolt_user_pass))\n    puppet_bolt_server = helper.get_global_setting(\"puppet_bolt_server\")\n    helper.log_info(\"puppet_bolt_server={}\".format(puppet_bolt_server))\n    puppet_action_hec_token = helper.get_global_setting(\"puppet_action_hec_token\")\n    helper.log_info(\"puppet_action_hec_token={}\".format(puppet_action_hec_token))\n    puppet_db_url = helper.get_global_setting(\"puppet_db_url\")\n    helper.log_info(\"puppet_db_url={}\".format(puppet_db_url))\n\n    # The following example gets the alert action parameters and prints them to the log\n    bolt_target = helper.get_param(\"bolt_target\")\n    helper.log_info(\"bolt_target={}\".format(bolt_target))\n\n    task_name = helper.get_param(\"task_name\")\n    helper.log_info(\"task_name={}\".format(task_name))\n\n    task_parameters = helper.get_param(\"task_parameters\")\n    helper.log_info(\"task_parameters={}\".format(task_parameters))\n\n    puppet_environment = helper.get_param(\"puppet_environment\")\n    helper.log_info(\"puppet_environment={}\".format(puppet_environment))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n\n    helper.log_info(\"Alert action puppet_run_task started.\")\n\n    # TODO: Implement your alert action logic here\n    return 0\n", "parameters": [{"help_string": "", "value": "$result.host$", "format_type": "text", "type": "", "name": "bolt_target", "label": "Host", "default_value": "$result.host$", "required": true}, {"help_string": "Bolt Task to run", "value": "", "format_type": "text", "type": "", "name": "task_name", "label": "Task", "default_value": "", "required": true}, {"help_string": "Additional parameters to pass to Bolt Task along with alert contents", "value": "", "format_type": "text", "type": "", "name": "task_parameters", "label": "Task Parameters", "default_value": "", "required": false}, {"help_string": "Puppet environment where task resides", "value": "production", "format_type": "text", "type": "", "name": "puppet_environment", "label": "Puppet Environment", "default_value": "production", "required": false}], "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAABL5JREFUWAnNWEtIY1cY/s69N8m9eagtFK1TW7uwUhdKO3QUQepiWmQWQunKWXXVlSDIFGFWlVK6Geimu4JSC+1sBlIXfQ1FFx2wuCzUobSC1Iq1TBLzzk1uTv//5GEeN46mCfjHe8/7P9/5/sdJFGNjY9JxHFwF0XUdBoPJ5/NXAY/CoF0ZJGUgVw6Q4c6QpG4N/K4XCVHf0fGWKyBd0/HyczZQAKRCQECEwGla4CQpqN49Yl0BXQsZ+OFeATJFm4MdngDoAhsPBT74wkDQ4qjsDleuRy1IoiYFPHkChHf68OufJoEjCDYZUSt2DQzb3xUQGYr+ivgtauKdj2JY+zELYRWpV4NodizW0zFxNVllzxd7svj4tg83XiEHt1NIF3g6+Ra8HQPQqMiVIcE0eCWGe3O4ezuBm6+lCJDE29d19PkMFKv+w9Abn8YtLtcWo6OjsjFTWz4N79/sQzFXcuhssYi3Jmy8/tIpDrIB3LpTwAm5mSEp+sp4TMsDXcsrs14Owtlsj8cDV0CgjeycgKMTF7ShpJCXtoPwqh83BhP4KxPCT48kfB6KRBoTpo7PvslSSvBRm5C2Ka0BkUJJHw76kpTyUCZewOaqD9cHEhQOlTGyeo+BW3cN/P4Pg2fK2hMG5OpDrO4MTKkl2TyWF9/+nCP/0gGHADm0XJXEIDPZHo66VS0B1c2iBvMhKG0b5NTdlAtr59PnnTz0Kg3ls1Sp4YGKGduH3JIhVs9+VPIlIGcLTI8ILL7LpqInQGbz03IuAwbdLPVgEokE4vE4stmsKr1er7oPY7HYuWhdGZKUpTOZkhexa+eLBbz5qo4vVwQsZHDv+wC+epiDh9IDi6DIiqSpXsbEaWRnZwfspNvb2xgZGcHU1BRs21bt5eVlpFIpaFozH01hz8wMBnV8vWrBSRfUHrKg4flnkvDpBXz6XQif3M8j1Espocj8laWGId54b28PwWCwMlpXHh8fY3p6WjFWO+AaZeqQdIEOBWJ4wUpi0H+Ka6EovE4ODx6Z+PB+Cj0EhpFwDiKtpadWc009EolgYWEBExMT2NjYUCMDAwNYXFwkK2RqZpaqzZxVptCGv5zo6H/Ph9UHJoRfR5zMYnoNFeKVaU8r19fXsbW1pUy0tLSEg4MDtWR+fl6ZsHH9OYAoxDUJ00rDq/GFqtPVYJMJq0Zq1OXaNgxD+YrKY8Tm7u6umtff3w/LsprWuDq1kHS7U8Z941mJvz+n68AhEFm+1+iuaZ1Lm5RzBzs4f9usyNDQkKomk0nFEEdfrbgyRDcU/ohZeBz3YO9fA48jVFL7OOOj5HymvFZRq/rs7KxiKBqNYm5uDpOTk2oqM+X2e7Apyng2Xe5IpMk8NSdjQ5m6Bq+lP/VLWmOUsWMfHh5ifHxcgeHXzMwMjo6Oqm2ucJS5mozTQ2+wnsrqysu5kAr/4eHhKhhOmCsrK9jf34dpmlW1lYoroMpgJ8pwOAyONDYXg+FEyQy6geH9ug7I7/eDHXhzc1O5AGfnVmC6Coj/ccDSWKrOc15dYYhBrK2tKSY4mjgXXVRco+yii8+bl06nKaNLFTmNuabVupZR1mrBZfrZd9oR18TYjqJOrblygIxKFHTqhP9HD2P5D7xNuyngDwkoAAAAAElFTkSuQmCC"}, {"largeIcon": "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", "uuid": "957e44661131409dafc5cfa15b421f63", "description": "Runs a Bolt Act Task with Puppet Enterprise", "short_name": "puppet_run_task_act", "label": "Run a Bolt Act Task", "code": "\n# encoding = utf-8\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets the setup parameters and prints them to the log\n    puppet_enterprise_console = helper.get_global_setting(\"puppet_enterprise_console\")\n    helper.log_info(\"puppet_enterprise_console={}\".format(puppet_enterprise_console))\n    puppet_read_user = helper.get_global_setting(\"puppet_read_user\")\n    helper.log_info(\"puppet_read_user={}\".format(puppet_read_user))\n    puppet_read_user_pass = helper.get_global_setting(\"puppet_read_user_pass\")\n    helper.log_info(\"puppet_read_user_pass={}\".format(puppet_read_user_pass))\n    splunk_hec_url = helper.get_global_setting(\"splunk_hec_url\")\n    helper.log_info(\"splunk_hec_url={}\".format(splunk_hec_url))\n    splunk_hec_token = helper.get_global_setting(\"splunk_hec_token\")\n    helper.log_info(\"splunk_hec_token={}\".format(splunk_hec_token))\n    bolt_user = helper.get_global_setting(\"bolt_user\")\n    helper.log_info(\"bolt_user={}\".format(bolt_user))\n    bolt_user_pass = helper.get_global_setting(\"bolt_user_pass\")\n    helper.log_info(\"bolt_user_pass={}\".format(bolt_user_pass))\n    puppet_bolt_server = helper.get_global_setting(\"puppet_bolt_server\")\n    helper.log_info(\"puppet_bolt_server={}\".format(puppet_bolt_server))\n    puppet_action_hec_token = helper.get_global_setting(\"puppet_action_hec_token\")\n    helper.log_info(\"puppet_action_hec_token={}\".format(puppet_action_hec_token))\n    puppet_db_url = helper.get_global_setting(\"puppet_db_url\")\n    helper.log_info(\"puppet_db_url={}\".format(puppet_db_url))\n\n    # The following example gets the alert action parameters and prints them to the log\n    bolt_act_target = helper.get_param(\"bolt_act_target\")\n    helper.log_info(\"bolt_act_target={}\".format(bolt_act_target))\n\n    bolt_act_name = helper.get_param(\"bolt_act_name\")\n    helper.log_info(\"bolt_act_name={}\".format(bolt_act_name))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n\n    helper.log_info(\"Alert action puppet_run_task_act started.\")\n\n    # TODO: Implement your alert action logic here\n    return 0\n", "parameters": [{"help_string": "", "value": "$result.host$", "format_type": "text", "type": "", "name": "bolt_act_target", "label": "Host", "default_value": "$result.host$", "required": true}, {"possible_values": {"Restart Service": "service"}, "value": "service", "format_type": "dropdownlist", "type": "", "name": "bolt_act_name", "label": "Perform Action", "default_value": "service", "required": true, "help_string": ""}], "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAABL5JREFUWAnNWEtIY1cY/s69N8m9eagtFK1TW7uwUhdKO3QUQepiWmQWQunKWXXVlSDIFGFWlVK6Geimu4JSC+1sBlIXfQ1FFx2wuCzUobSC1Iq1TBLzzk1uTv//5GEeN46mCfjHe8/7P9/5/sdJFGNjY9JxHFwF0XUdBoPJ5/NXAY/CoF0ZJGUgVw6Q4c6QpG4N/K4XCVHf0fGWKyBd0/HyczZQAKRCQECEwGla4CQpqN49Yl0BXQsZ+OFeATJFm4MdngDoAhsPBT74wkDQ4qjsDleuRy1IoiYFPHkChHf68OufJoEjCDYZUSt2DQzb3xUQGYr+ivgtauKdj2JY+zELYRWpV4NodizW0zFxNVllzxd7svj4tg83XiEHt1NIF3g6+Ra8HQPQqMiVIcE0eCWGe3O4ezuBm6+lCJDE29d19PkMFKv+w9Abn8YtLtcWo6OjsjFTWz4N79/sQzFXcuhssYi3Jmy8/tIpDrIB3LpTwAm5mSEp+sp4TMsDXcsrs14Owtlsj8cDV0CgjeycgKMTF7ShpJCXtoPwqh83BhP4KxPCT48kfB6KRBoTpo7PvslSSvBRm5C2Ka0BkUJJHw76kpTyUCZewOaqD9cHEhQOlTGyeo+BW3cN/P4Pg2fK2hMG5OpDrO4MTKkl2TyWF9/+nCP/0gGHADm0XJXEIDPZHo66VS0B1c2iBvMhKG0b5NTdlAtr59PnnTz0Kg3ls1Sp4YGKGduH3JIhVs9+VPIlIGcLTI8ILL7LpqInQGbz03IuAwbdLPVgEokE4vE4stmsKr1er7oPY7HYuWhdGZKUpTOZkhexa+eLBbz5qo4vVwQsZHDv+wC+epiDh9IDi6DIiqSpXsbEaWRnZwfspNvb2xgZGcHU1BRs21bt5eVlpFIpaFozH01hz8wMBnV8vWrBSRfUHrKg4flnkvDpBXz6XQif3M8j1Espocj8laWGId54b28PwWCwMlpXHh8fY3p6WjFWO+AaZeqQdIEOBWJ4wUpi0H+Ka6EovE4ODx6Z+PB+Cj0EhpFwDiKtpadWc009EolgYWEBExMT2NjYUCMDAwNYXFwkK2RqZpaqzZxVptCGv5zo6H/Ph9UHJoRfR5zMYnoNFeKVaU8r19fXsbW1pUy0tLSEg4MDtWR+fl6ZsHH9OYAoxDUJ00rDq/GFqtPVYJMJq0Zq1OXaNgxD+YrKY8Tm7u6umtff3w/LsprWuDq1kHS7U8Z941mJvz+n68AhEFm+1+iuaZ1Lm5RzBzs4f9usyNDQkKomk0nFEEdfrbgyRDcU/ohZeBz3YO9fA48jVFL7OOOj5HymvFZRq/rs7KxiKBqNYm5uDpOTk2oqM+X2e7Apyng2Xe5IpMk8NSdjQ5m6Bq+lP/VLWmOUsWMfHh5ifHxcgeHXzMwMjo6Oqm2ucJS5mozTQ2+wnsrqysu5kAr/4eHhKhhOmCsrK9jf34dpmlW1lYoroMpgJ8pwOAyONDYXg+FEyQy6geH9ug7I7/eDHXhzc1O5AGfnVmC6Coj/ccDSWKrOc15dYYhBrK2tKSY4mjgXXVRco+yii8+bl06nKaNLFTmNuabVupZR1mrBZfrZd9oR18TYjqJOrblygIxKFHTqhP9HD2P5D7xNuyngDwkoAAAAAElFTkSuQmCC"}]}, "sourcetype_builder": {"puppet:bolt": {"metadata": {"extractions_count": 0, "event_count": 0, "cims_count": 0, "data_input_name": null}}, "puppet:summary": {"metadata": {"extractions_count": 0, "event_count": 0, "cims_count": 0, "data_input_name": null}}, "puppet:detailed": {"metadata": {"extractions_count": 0, "event_count": 0, "cims_count": 0, "data_input_name": null}}}, "global_settings_builder": {"global_settings": {"customized_settings": [{"help_string": "URL to access the Puppet Enterprise console", "internal_name": "", "format_type": "text", "type": "text", "name": "puppet_enterprise_console", "label": "Puppet Enterprise Console", "default_value": "https://puppet.company.com", "value": "puppet.c.splunk-217321.internal", "required": true}, {"help_string": "Puppet Enterprise User with PuppetDB Access", "internal_name": "", "format_type": "text", "type": "text", "name": "puppet_read_user", "label": "Username", "default_value": "splunk", "value": "splunk", "required": true}, {"help_string": "", "internal_name": "", "format_type": "password", "type": "password", "name": "puppet_read_user_pass", "label": "Password", "default_value": "", "value": "", "required": true}, {"help_string": "URL to HEC services collector", "internal_name": "", "format_type": "text", "type": "text", "name": "splunk_hec_url", "label": "Splunk HEC URL", "default_value": "https://splunk.company.coml:8088/services/collector", "value": "splunk-dev.c.splunk-217321.internal", "required": true}, {"help_string": "Token from HEC configured with puppet:summary or puppet:detailed sourcetype", "internal_name": "", "format_type": "text", "type": "text", "name": "splunk_hec_token", "label": "HEC Token", "default_value": "", "value": "", "required": true}, {"help_string": "Puppet Enterprise User with Bolt Task Access (if different from PuppetDB)", "internal_name": "", "format_type": "text", "type": "text", "name": "bolt_user", "label": "Bolt User", "default_value": "", "value": "", "required": false}, {"help_string": "", "internal_name": "", "format_type": "password", "type": "password", "name": "bolt_user_pass", "label": "Bolt Password", "default_value": "", "value": "", "required": false}, {"help_string": "Puppet Enterprise Orchestrator URL (derived from PE Console by default)", "internal_name": "", "format_type": "text", "type": "text", "name": "puppet_bolt_server", "label": "Orch. Services URL", "default_value": "", "value": "", "required": false}, {"help_string": "Provide token if using dedicated HEC for the puppet:action sourcetype", "internal_name": "", "format_type": "text", "type": "text", "name": "puppet_action_hec_token", "label": "Bolt Action Token", "default_value": "", "value": "", "required": false}, {"help_string": "URL to access PuppetDB (derived from PE Console by default)", "internal_name": "", "format_type": "text", "type": "text", "name": "puppet_db_url", "label": "PuppetDB URL", "default_value": "", "value": "", "required": false}]}}, "basic_builder": {"appname": "TA-puppet-report-viewer", "tab_build_no": "12", "author": "Puppet, Inc.", "visible": true, "build_no": 3, "large_icon": "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", "theme": "#000000", "version": "1.5.1", "friendly_name": "Puppet Report Viewer", "description": "", "tab_version": "2.2.0", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAEyklEQVRYR+2YTWxUVRiGn3Pu/Hb+agKREmMqi2KaSE1IKBAJCwmkBBdoV5p0gYk/daGpLZTEGjGGOpZaSbpQNo1FEExIoCYVg6ZQQE1kwYrGYiIqIVhr0U5/Zu69M8ecMx0Z6kynNLRhwdnM3Dtz5zz3/d7ve2dGVFdXq3Q6zf2wLMtCrF69WjmOcz/w4PV6HwDNWYk5FFIoxMzFuUdljnNHi1HjIkAKS1o8ttwGF5QhyOL9PS35MyEQUi4GT2EPaR0ejXkZ6E6hJkAKF5BgQe8ZScunHsJB3ZX3XquiJauISM53uIz+Jbg4HGLVcpsnHklyeABajnsIBzT2EgKtjArOxx0Gfw6x+fUEbzwj6XpV0Xvaw+5jEArcexjtgaIKrYgKLsYdro1YHPlGsq5KsuXJCT4+7WffCZdQwLd0HtI7VcTgwocOKuEi/C7K9aJsxbXxENvfcUkhkTNm/z/ZwtUrqlDQL3lpSznplINAkEwrttTYrK38h1+nQ2xvcRlxFZ7MjJOUIhD0IqWe+NaC1SsKpJTCTkFGZttdCYFKpTn5bhnrVo7z+1SUb7/L4PNmM1AEPXSfTDIy6UcJDbUwlUoMxtkfK0gmXPr2+Vm7IqHnwYwSEqIW2/d6+WlEs2QH6ELWXWaZIuVavPyUTdvzaUjlWl9AxENdm8Xw0gJlsB0vjU+n2VufglQmOzB1eaIWdW95lhZIp9tUUtG0FXY/50BKswhQCqJe6tokwyNicUp22wUzgaoESQdqVyk+a4YyZYPPYzLOrKiPHW8qhv647aHx8XHzks/nw7Ztli1bhv7edevWLcrLywtarKCHzBYqw/RU7m4lTsZl8+MWh1sFQTVNZ3+II2dSeP3S9JMWamzKIq2rCAbg3LlzZvIODAxQVVXF+vXrzfmzZ8/S1NTE5OQkclZIFwWqCFsc2xckPaWDVYErqXhoEp90+eh0hPZjDuFYGjEDkO39262uNx4aGiIcDhdU4ubNm2zcuBGRd82c0VERFVz4wMFN6FmUNp3sERlO/BjixU9slsc8uWIV3DAfaGxsjMbGRq5cuUJzczMNDQ3mms7OTg4cOEBZWdl/n1E87TVQ3OHiLxY79ghe2wHvNaTo+SpE6xduybTPB9KbdnR0EIlEGB0d5fLly1RWVnL16lU2bNhALBabJ9D7Dj/8Jnm2LckrW728/YKk92vB7uOiZNrnAx08eJB4PE4wGDSGPnToEPX19SQSCaqrq43pc6uoQisjksG4bb6gCZ9AZXSEuBwe9LDnc4uyoDFN0WE8W6Guri4CgYAB6u/vp7a2Fu2jmpoao9ycQLrLHo5IevdaONrU2bZDeKDvew+dX6aJ+LWb5wd06dIldu7cycTEBHV1dRw9etTs39fXx65du+ZTMkUmI0hM2Xd0geYKWBJf0CoZV/kK6aDWyly/fp01a9agj3V3bdq0iRs3btyh8l1m2fzjMh9It782sS6ZBtEDs7W1lVOnTplz+WtJgNrb2+np6WHbtm2mbHowauDZMHPOoflrUfidhbrM3L0Q6N/vxdaiKjQ8PGxavbu7m/3795vnpdaiAel/U1paWkxZBgcHTZ7pzUqtRQPSG+vwzPkif/jNBbWoQKXUKPT6A6BSqhmF7re/9P4FOOuQpa0DAR0AAAAASUVORK5CYII="}, "validation": {"validation_id": "v_1549419514_51", "validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_finished", "progress": 1.0}}